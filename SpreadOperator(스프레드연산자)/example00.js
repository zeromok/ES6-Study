/*
    Spread Operator(스프레드 연산자)
    ES6 에 추가된 문법
    자세히 알아보자
*/

// ==========
// 기본 문법
// ==========

// ====================================================================================
// 배열, 문자열, 객체 등 반복 가능한 객체(iterable Object)를 객별요소로 분리할 수 있다.
// ====================================================================================

// arr
let arr00 = [1, 2, 3, 4, 5];        // [ 1, 2, 3, 4, 5 ]
let arr01 = [...arr00, 6, 7, 8];    // [ 1, 2, 3, 4, 5, 6, 7, 8 ]

// String
let str00 = 'Hello';
let str01 = [...str00]; // [ 'H', 'e', 'l', 'l', 'o' ]

// ==========================
// 배열에서의 Spread Operator
// ==========================
// 기존 방식
let arr02 = [1, 2, 3];
let arr03 = [4, 5, 6];

let result00 = arr02.concat(arr03); // [ 1, 2, 3, 4, 5, 6 ]

// Spread Operator
let arr04 = [1, 2, 3];
let arr05 = [4, 5, 6];

let result01 = [...arr04, ...arr05]; // [ 1, 2, 3, 4, 5, 6 ]

// 다양한 형태의 배열 병합
let arr06 = [1, 2, 3];
let arr07 = [4, 5, 6];

arr06.push(arr07); // [ 1, 2, 3, [ 4, 5, 6 ] ]
arr06.push(...arr07) // [ 1, 2, 3, 4, 5, 6 ]

// =========
// 배열 복사
// =========
// 단순 변수 할당
let arr08 = [1, 2];
let arr09 = arr08;

arr09.push(3); // 원본배열(arr08)도 변경

// JS array 복사
let arr10 = [1, 2];
let arr11 = arr10.slice(); // slice() : 배열의 복사본 반환

arr11.push(3); // 원본배열(arr10)은 변경되지 않는다.

// Spread Operator
let arr12 = [1, 2];
let arr14 = [...arr12];

arr14.push(3);  // 원본배열(arr12)은 변경되지 않는다.

// ========================================================================
// Spread 연산자를 이용한 복사는 얕은복사를 수행하며,
// 배열 안에 객체가 있는 경우에는 객체자체는 복사되지 않고 원본 값 참조
// ========================================================================
